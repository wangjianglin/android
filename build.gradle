// Top-level build file where you can add configuration options common to all sub-projects/modules.


apply plugin: 'maven'
//apply plugin: 'com.android.library'



def prop=new Properties();
if(new File("set.properties").exists()) {
    prop.load(new File("set.properties").newReader("utf8"));
}else if(new File("../set.properties").exists()){
    prop.load(new File("../set.properties").newReader("utf8"));
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

//task uploadArchives{
//println '==========='
//}
////
//task sourcesJar(type: Jar) {
//    println '==========='
//}
//
//task javadoc(type: Javadoc) {
//    println '==========='
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    println '==========='
//}


//android {
//    compileSdkVersion 22
//    buildToolsVersion "23.0.0 rc2"
//
//}




allprojects {

    apply plugin: 'maven'
//    apply plugin: 'com.android.library'


    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    repositories {
//        flatDir{
//            dirs '../web_xwalk/libs' //this way we can find the .aar file in libs folder
////            dirs(('../' + project.name + '/libs'))
//        }
        maven {url prop.getProperty('maven.url')}
        jcenter()
    }


//    uploadArchives {
//
//    }
}

def dateStr = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSS').format(new Date());


subprojects {

    group = 'lin'
    version = '0.0.2'

    if(project.name == 'demo'){
        apply plugin: 'com.android.application'
    }else {
        apply plugin: 'com.android.library'
    }
//    print('\n=================\n')
//    print(project.projectDir.absolutePath)
//
//    project.getRepositories().flatDir{
//        dirs project.projectDir.absolutePath + '/libs'
//    }
//    repositories {
//        flatDir{
//            dirs project.projectDir.absolutePath + '/libs' //this way we can find the .aar file in libs folder
//        }
//        maven {url prop.getProperty('maven.url')}
//        jcenter()
//    }
//    apply plugin: 'java'

//    android {
//        compileSdkVersion 22
//        buildToolsVersion "23.0.0 rc2"
//
//        compileSdkVersion 16
//        buildToolsVersion "23.0.0 rc2"
//
////    defaultConfig {
////        minSdkVersion 14
////        targetSdkVersion 22
////    }
//
//        defaultConfig {
//            minSdkVersion 14
//            targetSdkVersion 22
//            versionCode 1
//            versionName "0.0.1-SNAPSHOT"
//        }
//
//        sourceSets{
//            main {
////            manifest.srcFile 'AndroidManifest.xml'
//                java.srcDirs = ['src']
//                resources.srcDirs = ['src']
//                aidl.srcDirs = ['src']
//                renderscript.srcDirs = ['src']
//                res.srcDirs = ['res']
//                assets.srcDirs = ['assets']
//            }
//        }
//    }



//
//    task deleteManifest(type: Delete) {
//        //delete 'META-INF/MANIFEST.MF'
//        println '&&&&&&&&&&&&&&&&&&&&===='
//    }

    // copy the manifest back into the project directory at the end
//    task overrideManifest << {
//        println "******************"
////        File src = file('build/tmp/jar/MANIFEST.MF')
////        File dst = file('META-INF/MANIFEST.MF')
////        org.apache.commons.io.FileUtils.copyFile(src, dst)
//    }


//    overrideManifest.dependsOn(build)

    uploadArchives {

        doFirst {

            //configuration = configurations.archives
            repositories.mavenDeployer {
//            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//            repository(url: prop.getProperty('snapshots.repo')) {//仓库地址
//                authentication(userName: prop.getProperty('maven.username'),//用户名
//                        password: prop.getProperty('maven.password'))//密码
//            }
                snapshotRepository(url: prop.getProperty('snapshots.repo')) {//仓库地址
                    authentication(userName: prop.getProperty('maven.username'),//用户名
                            password: prop.getProperty('maven.password'))//密码
                }

                repository(url: prop.getProperty('release.repo')) {//仓库地址
                    authentication(userName: prop.getProperty('maven.username'),//用户名
                            password: prop.getProperty('maven.password'))//密码
                }


                pom.project {
                    name project.name
                    packaging 'aar'
                    description project.description
                    url prop.getProperty('snapshots.repo')//仓库地址
                    groupId project.group
                    artifactId project.name //LibA
                    version project.version
//                    manifest{
//                        provider 'lin'
//                    }
//                    build{
//
//                    }
                }
            }
        }
    }

//    jar {
//        manifest {
//            attributes 'Implementation-Title': 'title', 'Implementation-Version': dateStr
//        }
//    }



    task generateManifest << {
        println('---')
    }
//
//    task sourcesJar(type: Jar) {
//        println 'project.name:'+project.name
//
//        println 'android.sourceSets.main.java.srcDirs:'+project.android
//        from android.sourceSets.main.java.srcDirs
//        classifier = 'sources'
//    }
//
//    task javadoc(type: Javadoc) {
////        source = android.sourceSets.main.java.srcDirs
////        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    }
//
//    task javadocJar(type: Jar, dependsOn: javadoc) {
//        classifier = 'javadoc'
//        from javadoc.destinationDir
//    }
//
//    artifacts {
//        archives javadocJar
//        archives sourcesJar
//    }


    new File(project.buildDir.absolutePath + '/tmp/jarResources/META-INF').mkdirs();
    new File(project.buildDir.absolutePath + '/tmp/jarResources/META-INF/MANIFEST.MF').createNewFile();

    java.io.PrintWriter fo = new java.io.PrintWriter(new OutputStreamWriter(new FileOutputStream(project.buildDir.absolutePath + '/tmp/jarResources/META-INF/MANIFEST.MF',false)));

    fo.print('Manifest-Version: ')
    fo.println(version)

    fo.println('Provider: lin')
    fo.println('Date: ' + dateStr)
    fo.println('\n');
    fo.close();

    task sourcesJar(type: Jar) {
//    println 'project.name:'+project.name

//    println 'android.sourceSets.main.java.srcDirs:'+project.android
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

//task javadoc(type: Javadoc) {
//        source = android.sourceSets.main.java.srcDirs
//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

    artifacts {
//    archives javadocJar
        archives sourcesJar
    }

}
